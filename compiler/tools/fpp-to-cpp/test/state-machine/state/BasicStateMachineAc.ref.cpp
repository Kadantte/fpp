// ======================================================================
// \title  BasicStateMachineAc.cpp
// \author Generated by fpp-to-cpp
// \brief  cpp file for Basic state machine
// ======================================================================

#include "Fw/Types/Assert.hpp"
#include "state-machine/state/BasicStateMachineAc.hpp"

namespace FppTest {

  namespace SmState {

    // ----------------------------------------------------------------------
    // Constructors and Destructors
    // ----------------------------------------------------------------------

    BasicStateMachineBase ::
      BasicStateMachineBase()
    {

    }

    BasicStateMachineBase ::
      ~BasicStateMachineBase()
    {

    }

    // ----------------------------------------------------------------------
    // Initialization
    // ----------------------------------------------------------------------

    void BasicStateMachineBase ::
      initBase(const FwEnumStoreType id)
    {
      this->m_id = id;
      // Enter the initial target of the state machine
      this->enter_S(Signal::__FPRIME_AC_INITIAL_TRANSITION);
    }

    // ----------------------------------------------------------------------
    // Getter functions
    // ----------------------------------------------------------------------

    BasicStateMachineBase::State BasicStateMachineBase ::
      getState() const
    {
      return this->m_state;
    }

    // ----------------------------------------------------------------------
    // Send signal functions
    // ----------------------------------------------------------------------

    void BasicStateMachineBase ::
      sendSignal_s()
    {
      switch (this->m_state) {
        case State::S:
          // Do the actions for the transition
          this->action_a(Signal::s);
          this->action_a(Signal::s);
          this->action_a(Signal::s);
          // Enter the target
          this->enter_T(Signal::s);
          break;
        case State::T:
          break;
        default:
          FW_ASSERT(0, static_cast<FwAssertArgType>(this->m_state));
          break;
      }
    }

    // ----------------------------------------------------------------------
    // State and choice entry
    // ----------------------------------------------------------------------

    void BasicStateMachineBase ::
      enter_T(Signal signal)
    {
      // Do the entry actions
      this->action_a(signal);
      this->action_a(signal);
      this->action_a(signal);
      // Update the state
      this->m_state = State::T;
    }

    void BasicStateMachineBase ::
      enter_S(Signal signal)
    {
      // Update the state
      this->m_state = State::S;
    }

  }

}
