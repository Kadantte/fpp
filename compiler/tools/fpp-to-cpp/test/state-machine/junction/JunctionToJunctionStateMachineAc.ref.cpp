// ======================================================================
// \title  JunctionToJunctionStateMachineAc.cpp
// \author Generated by fpp-to-cpp
// \brief  cpp file for JunctionToJunction state machine
// ======================================================================

#include "Fw/Types/Assert.hpp"
#include "junction/JunctionToJunctionStateMachineAc.hpp"

namespace FppTest {

  namespace SmJunction {

    // ----------------------------------------------------------------------
    // Constructors and Destructors
    // ----------------------------------------------------------------------

    JunctionToJunctionStateMachineBase ::
      JunctionToJunctionStateMachineBase()
    {

    }

    JunctionToJunctionStateMachineBase ::
      ~JunctionToJunctionStateMachineBase()
    {

    }

    // ----------------------------------------------------------------------
    // Initialization
    // ----------------------------------------------------------------------

    void JunctionToJunctionStateMachineBase ::
      initBase(const FwEnumStoreType id)
    {
      this->m_id = id;
      this->enter_S1(Signal::__FPRIME_AC_INITIAL_TRANSITION);
    }

    // ----------------------------------------------------------------------
    // Getter functions
    // ----------------------------------------------------------------------

    JunctionToJunctionStateMachineBase::State JunctionToJunctionStateMachineBase ::
      getState() const
    {
      return this->m_state;
    }

    // ----------------------------------------------------------------------
    // Send signal functions
    // ----------------------------------------------------------------------

    void JunctionToJunctionStateMachineBase ::
      sendSignal_s()
    {
      switch (this->m_state) {
        case State::S1:
          this->enter_S1_J1(Signal::s);
          break;
        case State::S2_S3:
          break;
        case State::S2_S4:
          break;
        default:
          FW_ASSERT(0, static_cast<FwAssertArgType>(this->m_state));
          break;
      }
    }

    // ----------------------------------------------------------------------
    // State and junction entry
    // ----------------------------------------------------------------------

    void JunctionToJunctionStateMachineBase ::
      enter_S2(Signal signal)
    {
      this->action_enterS2(signal);
      this->enter_S2_S3(signal);
    }

    void JunctionToJunctionStateMachineBase ::
      enter_S2_J2(Signal signal)
    {
      if (this->guard_g2(signal)) {
        this->enter_S2_S3(signal);
      }
      else {
        this->enter_S2_S4(signal);
      }
    }

    void JunctionToJunctionStateMachineBase ::
      enter_S2_S3(Signal signal)
    {
      this->m_state = State::S2_S3;
    }

    void JunctionToJunctionStateMachineBase ::
      enter_S2_S4(Signal signal)
    {
      this->m_state = State::S2_S4;
    }

    void JunctionToJunctionStateMachineBase ::
      enter_S1(Signal signal)
    {
      this->m_state = State::S1;
    }

    void JunctionToJunctionStateMachineBase ::
      enter_S1_J1(Signal signal)
    {
      if (this->guard_g1(signal)) {
        this->action_exitS1(signal);
        this->action_a(signal);
        this->enter_S2(signal);
      }
      else {
        this->action_exitS1(signal);
        this->action_a(signal);
        this->action_enterS2(signal);
        this->enter_S2_J2(signal);
      }
    }

  }

}
