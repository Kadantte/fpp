// ======================================================================
// \title  ChoiceStateMachineAc.cpp
// \author Generated by fpp-to-cpp
// \brief  cpp file for Choice state machine
// ======================================================================

#include "ChoiceStateMachineAc.hpp"
#include "Fw/Types/Assert.hpp"

namespace FppTest {

  namespace SmInitial {

    // ----------------------------------------------------------------------
    // Constructors and Destructors
    // ----------------------------------------------------------------------

    ChoiceStateMachineBase ::
      ChoiceStateMachineBase()
    {

    }

    ChoiceStateMachineBase ::
      ~ChoiceStateMachineBase()
    {

    }

    // ----------------------------------------------------------------------
    // Initialization
    // ----------------------------------------------------------------------

    void ChoiceStateMachineBase ::
      initBase(const FwEnumStoreType id)
    {
      this->m_id = id;
      this->action_a(Signal::__FPRIME_AC_INITIAL_TRANSITION);
      this->enter_C(Signal::__FPRIME_AC_INITIAL_TRANSITION);
    }

    // ----------------------------------------------------------------------
    // Getter functions
    // ----------------------------------------------------------------------

    ChoiceStateMachineBase::State ChoiceStateMachineBase ::
      getState() const
    {
      return this->m_state;
    }

    // ----------------------------------------------------------------------
    // State and choice entry
    // ----------------------------------------------------------------------

    void ChoiceStateMachineBase ::
      enter_T(Signal signal)
    {
      this->action_a(signal);
      this->action_a(signal);
      this->m_state = State::T;
    }

    void ChoiceStateMachineBase ::
      enter_S(Signal signal)
    {
      this->action_a(signal);
      this->m_state = State::S;
    }

    void ChoiceStateMachineBase ::
      enter_C(Signal signal)
    {
      if (this->guard_g(signal)) {
        this->action_a(signal);
        this->enter_S(signal);
      }
      else {
        this->action_a(signal);
        this->action_a(signal);
        this->enter_T(signal);
      }
    }

  }

}
