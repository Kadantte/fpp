// ======================================================================
// \title  SmJunctionActiveComponentAc.hpp
// \author Generated by fpp-to-cpp
// \brief  hpp file for SmJunctionActive component base class
// ======================================================================

#ifndef FppTest_SmJunctionActiveComponentAc_HPP
#define FppTest_SmJunctionActiveComponentAc_HPP

#include "FpConfig.hpp"
#include "Fw/Comp/ActiveComponentBase.hpp"
#include "Fw/Port/InputSerializePort.hpp"
#include "Fw/Port/OutputSerializePort.hpp"
#include "SmJunctionActive_BasicStateMachineAc.hpp"
#include "state-machine/junction/BasicStateMachineAc.hpp"

namespace FppTest {

  //! \class SmJunctionActiveComponentBase
  //! \brief Auto-generated base for SmJunctionActive component
  class SmJunctionActiveComponentBase :
    public Fw::ActiveComponentBase
  {

      // ----------------------------------------------------------------------
      // Friend classes
      // ----------------------------------------------------------------------

      //! Friend class for white-box testing
      friend class SmJunctionActiveComponentBaseFriend;

    PROTECTED:

      // ----------------------------------------------------------------------
      // Constants
      // ----------------------------------------------------------------------

      //! State machine identifiers
      enum class SmId : FwEnumStoreType {
        basic,
        smJunctionBasic,
      };

    PROTECTED:

      // ----------------------------------------------------------------------
      // Types for internal state machines
      // ----------------------------------------------------------------------

      //! Implementation of state machine FppTest_SmJunction_Basic
      class FppTest_SmJunction_Basic :
        public FppTest::SmJunction::BasicStateMachineBase
      {

        public:

          //! Constructor
          FppTest_SmJunction_Basic(
              SmJunctionActiveComponentBase& component //!< The enclosing component
          );

        public:

          //! Initialize the state machine
          void init(
              SmJunctionActiveComponentBase::SmId smId //!< The state machine id
          );

        public:

          //! Get the state machine id
          SmJunctionActiveComponentBase::SmId getId() const;

        PRIVATE:

          //! Implementation for action a
          void action_a(
              Signal signal //!< The signal
          );

          //! Implementation for action b
          void action_b(
              Signal signal //!< The signal
          );

        PRIVATE:

          //! Implementation for guard g
          bool guard_g(
              Signal signal //!< The signal
          ) const;

        PRIVATE:

          //! The enclosing component
          SmJunctionActiveComponentBase& m_component;

      };

      //! Implementation of state machine FppTest_SmJunctionActive_Basic
      class FppTest_SmJunctionActive_Basic :
        public FppTest::SmJunctionActive_BasicStateMachineBase
      {

        public:

          //! Constructor
          FppTest_SmJunctionActive_Basic(
              SmJunctionActiveComponentBase& component //!< The enclosing component
          );

        public:

          //! Initialize the state machine
          void init(
              SmJunctionActiveComponentBase::SmId smId //!< The state machine id
          );

        public:

          //! Get the state machine id
          SmJunctionActiveComponentBase::SmId getId() const;

        PRIVATE:

          //! Implementation for action a
          void action_a(
              Signal signal //!< The signal
          );

          //! Implementation for action b
          void action_b(
              Signal signal //!< The signal
          );

        PRIVATE:

          //! Implementation for guard g
          bool guard_g(
              Signal signal //!< The signal
          ) const;

        PRIVATE:

          //! The enclosing component
          SmJunctionActiveComponentBase& m_component;

      };

    public:

      // ----------------------------------------------------------------------
      // Component initialization
      // ----------------------------------------------------------------------

      //! Initialize SmJunctionActiveComponentBase object
      void init(
          FwSizeType queueDepth, //!< The queue depth
          FwEnumStoreType instance = 0 //!< The instance number
      );

    PROTECTED:

      // ----------------------------------------------------------------------
      // Component construction and destruction
      // ----------------------------------------------------------------------

      //! Construct SmJunctionActiveComponentBase object
      SmJunctionActiveComponentBase(
          const char* compName = "" //!< The component name
      );

      //! Destroy SmJunctionActiveComponentBase object
      virtual ~SmJunctionActiveComponentBase();

    PROTECTED:

      // ----------------------------------------------------------------------
      // State getter functions
      // ----------------------------------------------------------------------

      //! Get the state of state machine instance basic
      FppTest_SmJunctionActive_Basic::State basic_getState() const;

      //! Get the state of state machine instance smJunctionBasic
      FppTest_SmJunction_Basic::State smJunctionBasic_getState() const;

    PROTECTED:

      // ----------------------------------------------------------------------
      // Signal send functions
      // ----------------------------------------------------------------------

      //! Send signal s to state machine basic
      void basic_sendSignal_s();

      //! Send signal s to state machine smJunctionBasic
      void smJunctionBasic_sendSignal_s();

    PROTECTED:

      // ----------------------------------------------------------------------
      // Functions to implement for internal state machine actions
      // ----------------------------------------------------------------------

      //! Implementation for action a of state machine FppTest_SmJunction_Basic
      //!
      //! Action a
      virtual void FppTest_SmJunction_Basic_action_a(
          SmId smId, //!< The state machine id
          FppTest_SmJunction_Basic::Signal signal //!< The signal
      ) = 0;

      //! Implementation for action b of state machine FppTest_SmJunction_Basic
      //!
      //! Action b
      virtual void FppTest_SmJunction_Basic_action_b(
          SmId smId, //!< The state machine id
          FppTest_SmJunction_Basic::Signal signal //!< The signal
      ) = 0;

      //! Implementation for action a of state machine FppTest_SmJunctionActive_Basic
      //!
      //! Action a
      virtual void FppTest_SmJunctionActive_Basic_action_a(
          SmId smId, //!< The state machine id
          FppTest_SmJunctionActive_Basic::Signal signal //!< The signal
      ) = 0;

      //! Implementation for action b of state machine FppTest_SmJunctionActive_Basic
      //!
      //! Action b
      virtual void FppTest_SmJunctionActive_Basic_action_b(
          SmId smId, //!< The state machine id
          FppTest_SmJunctionActive_Basic::Signal signal //!< The signal
      ) = 0;

    PROTECTED:

      // ----------------------------------------------------------------------
      // Functions to implement for internal state machine guards
      // ----------------------------------------------------------------------

      //! Implementation for guard g of state machine FppTest_SmJunction_Basic
      //!
      //! Guard g
      virtual bool FppTest_SmJunction_Basic_guard_g(
          SmId smId, //!< The state machine id
          FppTest_SmJunction_Basic::Signal signal //!< The signal
      ) = 0;

      //! Implementation for guard g of state machine FppTest_SmJunctionActive_Basic
      //!
      //! Guard g
      virtual bool FppTest_SmJunctionActive_Basic_guard_g(
          SmId smId, //!< The state machine id
          FppTest_SmJunctionActive_Basic::Signal signal //!< The signal
      ) = 0;

    PRIVATE:

      // ----------------------------------------------------------------------
      // Message dispatch functions
      // ----------------------------------------------------------------------

      //! Called in the message loop to dispatch a message from the queue
      virtual MsgDispatchStatus doDispatch();

    PRIVATE:

      // ----------------------------------------------------------------------
      // Send signal helper functions
      // ----------------------------------------------------------------------

      //! Start sending a signal to a state machine
      void sendSignalStart(
          SmId smId, //!< The state machine ID (input)
          FwEnumStoreType signal, //!< The signal (input)
          Fw::SerializeBufferBase& buffer //!< The message buffer (output)
      );

      //! Finish sending a signal to a state machine
      void basic_sendSignalFinish(
          Fw::SerializeBufferBase& buffer //!< The buffer with the data to send
      );

      //! Finish sending a signal to a state machine
      void smJunctionBasic_sendSignalFinish(
          Fw::SerializeBufferBase& buffer //!< The buffer with the data to send
      );

    PRIVATE:

      // ----------------------------------------------------------------------
      // Helper functions for state machine dispatch
      // ----------------------------------------------------------------------

      //! Dispatch a signal to a state machine instance
      void smDispatch(
          Fw::SerializeBufferBase& buffer //!< The message buffer
      );

      //! Deserialize the state machine ID and signal from the message buffer
      static void deserializeSmIdAndSignal(
          Fw::SerializeBufferBase& buffer, //!< The message buffer (input and output)
          FwEnumStoreType& smId, //!< The state machine ID (output)
          FwEnumStoreType& signal //!< The signal (output)
      );

      //! Dispatch a signal to a state machine instance of type FppTest_SmJunction_Basic
      void FppTest_SmJunction_Basic_smDispatch(
          Fw::SerializeBufferBase& buffer, //!< The message buffer
          FppTest_SmJunction_Basic& sm, //!< The state machine
          FppTest_SmJunction_Basic::Signal signal //!< The signal
      );

      //! Dispatch a signal to a state machine instance of type FppTest_SmJunctionActive_Basic
      void FppTest_SmJunctionActive_Basic_smDispatch(
          Fw::SerializeBufferBase& buffer, //!< The message buffer
          FppTest_SmJunctionActive_Basic& sm, //!< The state machine
          FppTest_SmJunctionActive_Basic::Signal signal //!< The signal
      );

    PRIVATE:

      // ----------------------------------------------------------------------
      // State machine instances
      // ----------------------------------------------------------------------

      //! State machine basic
      FppTest_SmJunctionActive_Basic m_stateMachine_basic;

      //! State machine smJunctionBasic
      FppTest_SmJunction_Basic m_stateMachine_smJunctionBasic;

  };

}

#endif
