// ======================================================================
// \title  ActiveSmInitialComponentAc.hpp
// \author Generated by fpp-to-cpp
// \brief  hpp file for ActiveSmInitial component base class
// ======================================================================

#ifndef FppTest_ActiveSmInitialComponentAc_HPP
#define FppTest_ActiveSmInitialComponentAc_HPP

#include "ActiveSmInitial_BasicStateMachineAc.hpp"
#include "ActiveSmInitial_JunctionStateMachineAc.hpp"
#include "FpConfig.hpp"
#include "Fw/Comp/ActiveComponentBase.hpp"
#include "Fw/Port/InputSerializePort.hpp"
#include "Fw/Port/OutputSerializePort.hpp"
#include "state-machine/initial/BasicStateMachineAc.hpp"
#include "state-machine/initial/JunctionStateMachineAc.hpp"

namespace FppTest {

  //! \class ActiveSmInitialComponentBase
  //! \brief Auto-generated base for ActiveSmInitial component
  class ActiveSmInitialComponentBase :
    public Fw::ActiveComponentBase
  {

      // ----------------------------------------------------------------------
      // Friend classes
      // ----------------------------------------------------------------------

      //! Friend class for white-box testing
      friend class ActiveSmInitialComponentBaseFriend;

    PROTECTED:

      // ----------------------------------------------------------------------
      // Constants
      // ----------------------------------------------------------------------

      //! State machine identifiers
      enum class SmId : FwEnumStoreType {
        basic,
        junction,
        smInitialBasic,
        smInitialJunction,
      };

    PROTECTED:

      // ----------------------------------------------------------------------
      // Types for internal state machines
      // ----------------------------------------------------------------------

      //! Implementation of state machine Basic
      class Basic :
        public FppTest::ActiveSmInitial_BasicStateMachineBase
      {

        public:

          //! Constructor
          Basic(
              ActiveSmInitialComponentBase& component //!< The enclosing component
          );

        public:

          //! Initialize the state machine
          void init(
              ActiveSmInitialComponentBase::SmId smId //!< The state machine id
          );

        public:

          //! Get the state machine id
          ActiveSmInitialComponentBase::SmId getId() const;

        PRIVATE:

          //! Implementation for action a
          void action_a(
              Signal signal //!< The signal
          );

        PRIVATE:

          //! The enclosing component
          ActiveSmInitialComponentBase& m_component;

      };

      //! Implementation of state machine Junction
      class Junction :
        public FppTest::ActiveSmInitial_JunctionStateMachineBase
      {

        public:

          //! Constructor
          Junction(
              ActiveSmInitialComponentBase& component //!< The enclosing component
          );

        public:

          //! Initialize the state machine
          void init(
              ActiveSmInitialComponentBase::SmId smId //!< The state machine id
          );

        public:

          //! Get the state machine id
          ActiveSmInitialComponentBase::SmId getId() const;

        PRIVATE:

          //! Implementation for action a
          void action_a(
              Signal signal //!< The signal
          );

        PRIVATE:

          //! Implementation for guard g
          bool guard_g(
              Signal signal //!< The signal
          ) const;

        PRIVATE:

          //! The enclosing component
          ActiveSmInitialComponentBase& m_component;

      };

      //! Implementation of state machine SmInitial_Basic
      class SmInitial_Basic :
        public FppTest::SmInitial::BasicStateMachineBase
      {

        public:

          //! Constructor
          SmInitial_Basic(
              ActiveSmInitialComponentBase& component //!< The enclosing component
          );

        public:

          //! Initialize the state machine
          void init(
              ActiveSmInitialComponentBase::SmId smId //!< The state machine id
          );

        public:

          //! Get the state machine id
          ActiveSmInitialComponentBase::SmId getId() const;

        PRIVATE:

          //! Implementation for action a
          void action_a(
              Signal signal //!< The signal
          );

        PRIVATE:

          //! The enclosing component
          ActiveSmInitialComponentBase& m_component;

      };

      //! Implementation of state machine SmInitial_Junction
      class SmInitial_Junction :
        public FppTest::SmInitial::JunctionStateMachineBase
      {

        public:

          //! Constructor
          SmInitial_Junction(
              ActiveSmInitialComponentBase& component //!< The enclosing component
          );

        public:

          //! Initialize the state machine
          void init(
              ActiveSmInitialComponentBase::SmId smId //!< The state machine id
          );

        public:

          //! Get the state machine id
          ActiveSmInitialComponentBase::SmId getId() const;

        PRIVATE:

          //! Implementation for action a
          void action_a(
              Signal signal //!< The signal
          );

        PRIVATE:

          //! Implementation for guard g
          bool guard_g(
              Signal signal //!< The signal
          ) const;

        PRIVATE:

          //! The enclosing component
          ActiveSmInitialComponentBase& m_component;

      };

    public:

      // ----------------------------------------------------------------------
      // Component initialization
      // ----------------------------------------------------------------------

      //! Initialize ActiveSmInitialComponentBase object
      void init(
          FwSizeType queueDepth, //!< The queue depth
          FwEnumStoreType instance = 0 //!< The instance number
      );

    PROTECTED:

      // ----------------------------------------------------------------------
      // Component construction and destruction
      // ----------------------------------------------------------------------

      //! Construct ActiveSmInitialComponentBase object
      ActiveSmInitialComponentBase(
          const char* compName = "" //!< The component name
      );

      //! Destroy ActiveSmInitialComponentBase object
      virtual ~ActiveSmInitialComponentBase();

    PROTECTED:

      // ----------------------------------------------------------------------
      // State getter functions
      // ----------------------------------------------------------------------

      //! Get the state of state machine instance basic
      Basic::State basic_getState() const;

      //! Get the state of state machine instance junction
      Junction::State junction_getState() const;

      //! Get the state of state machine instance smInitialBasic
      SmInitial_Basic::State smInitialBasic_getState() const;

      //! Get the state of state machine instance smInitialJunction
      SmInitial_Junction::State smInitialJunction_getState() const;

    PROTECTED:

      // ----------------------------------------------------------------------
      // Functions to implement for internal state machine actions
      // ----------------------------------------------------------------------

      //! Implementation for action a of state machine Basic
      //!
      //! Action a
      virtual void Basic_action_a(
          SmId smId, //!< The state machine id
          Basic::Signal signal //!< The signal
      ) = 0;

      //! Implementation for action a of state machine Junction
      //!
      //! Action a
      virtual void Junction_action_a(
          SmId smId, //!< The state machine id
          Junction::Signal signal //!< The signal
      ) = 0;

      //! Implementation for action a of state machine SmInitial_Basic
      //!
      //! Action a
      virtual void SmInitial_Basic_action_a(
          SmId smId, //!< The state machine id
          SmInitial_Basic::Signal signal //!< The signal
      ) = 0;

      //! Implementation for action a of state machine SmInitial_Junction
      //!
      //! Action a
      virtual void SmInitial_Junction_action_a(
          SmId smId, //!< The state machine id
          SmInitial_Junction::Signal signal //!< The signal
      ) = 0;

    PROTECTED:

      // ----------------------------------------------------------------------
      // Functions to implement for internal state machine guards
      // ----------------------------------------------------------------------

      //! Implementation for guard g of state machine Junction
      //!
      //! Guard g
      virtual bool Junction_guard_g(
          SmId smId, //!< The state machine id
          Junction::Signal signal //!< The signal
      ) = 0;

      //! Implementation for guard g of state machine SmInitial_Junction
      //!
      //! Guard g
      virtual bool SmInitial_Junction_guard_g(
          SmId smId, //!< The state machine id
          SmInitial_Junction::Signal signal //!< The signal
      ) = 0;

    PRIVATE:

      // ----------------------------------------------------------------------
      // Message dispatch functions
      // ----------------------------------------------------------------------

      //! Called in the message loop to dispatch a message from the queue
      virtual MsgDispatchStatus doDispatch();

    PRIVATE:

      // ----------------------------------------------------------------------
      // Helper functions for state machine dispatch
      // ----------------------------------------------------------------------

      //! Dispatch a signal to a state machine instance
      void smDispatch(
          Fw::SerializeBufferBase& buffer //!< The message buffer
      );

      //! Deserialize the state machine ID and signal from the message buffer
      static void deserializeSmIdAndSignal(
          Fw::SerializeBufferBase& buffer, //!< The message buffer (input and output)
          FwEnumStoreType& smId, //!< The state machine ID (output)
          FwEnumStoreType& signal //!< The signal (output)
      );

      //! Dispatch a signal to a state machine instance of type Basic
      void Basic_smDispatch(
          Fw::SerializeBufferBase& buffer, //!< The message buffer
          Basic& sm, //!< The state machine
          Basic::Signal signal //!< The signal
      );

      //! Dispatch a signal to a state machine instance of type Junction
      void Junction_smDispatch(
          Fw::SerializeBufferBase& buffer, //!< The message buffer
          Junction& sm, //!< The state machine
          Junction::Signal signal //!< The signal
      );

      //! Dispatch a signal to a state machine instance of type SmInitial_Basic
      void SmInitial_Basic_smDispatch(
          Fw::SerializeBufferBase& buffer, //!< The message buffer
          SmInitial_Basic& sm, //!< The state machine
          SmInitial_Basic::Signal signal //!< The signal
      );

      //! Dispatch a signal to a state machine instance of type SmInitial_Junction
      void SmInitial_Junction_smDispatch(
          Fw::SerializeBufferBase& buffer, //!< The message buffer
          SmInitial_Junction& sm, //!< The state machine
          SmInitial_Junction::Signal signal //!< The signal
      );

    PRIVATE:

      // ----------------------------------------------------------------------
      // State machine instances
      // ----------------------------------------------------------------------

      //! State machine basic
      Basic m_stateMachine_basic;

      //! State machine junction
      Junction m_stateMachine_junction;

      //! State machine smInitialBasic
      SmInitial_Basic m_stateMachine_smInitialBasic;

      //! State machine smInitialJunction
      SmInitial_Junction m_stateMachine_smInitialJunction;

  };

}

#endif
